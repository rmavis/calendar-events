#!/usr/bin/env ruby

require 'date'
require_relative 'extensions.rb'
{
  :EventStream => 'event-stream.rb',
}.each do |sym,file|
  autoload(sym, "#{__dir__}/#{file}")
end

# usage :: string
def usage
  <<~END
      calendar-events: usage coming soon
    END
end

# input_form_specs :: void -> specs
# specs = {opt => [type, want, check, transform, act, err]}
# opt = (string) an option, e.g. passed on the command line
# type = (symbol) the type of argument this option specifies,
#   e.g. :data, :conf
# want = (int) the number of arguments this option wants.
# check = (symbol) a method name on String that validates the input
#   value and returns boolean indicating whether it's acceptable
# transform = (symbol) a method name on String that transforms the
#   input value into the form required internally
# act = event -> bool
# event = see EventStream.next!
# err = string -> string
def input_form_specs
  {
    '-A' => [
      :data, 1, :is_numeric?, :to_i,
      lambda do |n|
        today = 'today'.to_timestamp
        method(:between?).curry.(true).(today).(today + (86400 * (n + 1)))
      end,
      lambda {|arg| "The option -A expects its argument to be a number."}
    ],
    '-B' => [
      :data, 1, :is_numeric?, :to_i,
      lambda do |n|
        today = 'today'.to_timestamp
        method(:between?).curry.(true).(today - (86400 * n)).(today)
      end,
      lambda {|arg| "The option -B expects its argument to be a number."}
    ],
    '-be' => [
      :data, 2, :is_date?, :to_timestamp,
      lambda do |d1,d2|
        if (d1 < d2)
          method(:between?).curry.(true).(d1).(d2)
        else
          method(:between?).curry.(true).(d2).(d1)
        end
      end,
      invalid_date_message
    ],
    '-bt' => [
      :data, 2, :is_date?, :to_timestamp,
      lambda do |d1,d2|
        if (d1 < d2)
          method(:between?).curry.(false).(d1).(d2)
        else
          method(:between?).curry.(false).(d2).(d1)
        end
      end,
      invalid_date_message
    ],
    '-eq' => [
      :data, 1, :is_date?, :to_timestamp,
      lambda {|date| method(:on?).curry.(date)},
      invalid_date_message
    ],
    '-f' => [
      :conf, 1, :is_file?, :to_abs_path,
      lambda {|path| {:file => path}},
      lambda {|arg| "Cannot read events from the file '#{arg}'."}
    ],
    '-ge' => [
      :data, 1, :is_date?, :to_timestamp,
      lambda {|date| method(:after?).curry.(true).(date)},
      invalid_date_message
    ],
    '-gt' => [
      :data, 1, :is_date?, :to_timestamp,
      lambda {|date| method(:after?).curry.(false).(date)},
      invalid_date_message
    ],
    '-h' => [
      :action, 0, nil, nil, lambda {$stdout.puts usage}
    ],
    '-le' => [
      :data, 1, :is_date?, :to_timestamp,
      lambda {|date| method(:before?).curry.(true).(date)},
      invalid_date_message
    ],
    '-lt' => [
      :data, 1, :is_date?, :to_timestamp,
      lambda {|date| method(:before?).curry.(false).(date)},
      invalid_date_message
    ],
    '-ne' => [
      :data, 1, :is_date?, :to_timestamp,
      lambda {|date| method(:not_on?).curry.(date)},
      invalid_date_message
    ],
  }
end

# default_file :: void -> string
def default_file
  "#{File.expand_path('~')}/.calendar/calendar-events"
end

# prescreen_input :: [string]? -> [string]
def prescreen_input(args)
  if ((args.nil?) || (args.empty?))
    ['-eq', Date.today.strftime('%Y-%m-%d')]
  elsif ((args.length == 1) && (args[0].is_date?))
    ['-eq', args[0]]
  else
    args
  end
end

# reduce_input :: ([string], specs) -> job
# specs, act = see `input_form_specs`
# job = {
#   :acts => [act]
#   :conf => conf
# }
# conf = (hash) will at very least contain:
#   :file => (string) absolute path
def reduce_input(input, specs)
  acts = [ ]
  conf = {
    :file => default_file,
  }

  n = 0
  max = input.length
  while (n < max)
    arg = input[n]
    if (specs.has_key?(arg))
      spec = specs[arg]
      check = check_input!(input.slice(n + 1, max - n), spec[1], spec[2], spec[3], spec[4], spec[5])
      if (!check.nil?)
        if (spec[0] == :data)
          acts.push(check)
        elsif (spec[0] == :conf)
          conf = conf.merge(check)
        else  # Immediate actions.
          check.call
        end
      end
      n += spec[1]
    else
      $stderr.puts "calendar-events: Invalid option: '#{arg}'"
    end
    n += 1
  end

  return {
    :acts => acts,
    :conf => conf,
  }
end

# check_input! :: (args, want, type, check, transform, err, (a -> act|hash)) -> (act|hash)?
# args, want, type, check, transform, err, act = see `input_form_specs`
# This function might write to stderr.
def check_input!(args, want, check, transform, act, err)
  if (want == 0)
    return act
  end
  if (args.length < want)
    return nil
  end
  values = [ ]
  args.slice(0, want).each do |item|
    begin
      if (item.send(check))
        values.push(item.send(transform))
      else
        $stderr.puts "calendar-events: #{err.call(item)}"
        return nil
      end
    rescue
      # This is to catch exceptions raised by the check or transform
      # functions. For example, Date.parse could raise one.
      $stderr.puts "calendar-events: #{err.call(item)}"
      return nil
    end
  end
  return act.call(*values)
end

# invalid_date_message :: void -> (string -> string)
def invalid_date_message
  lambda {|arg| "'#{arg}' is not a valid date."}
end

# run :: job -> void
# job = see `reduce_input`
def run(job)
  if (job[:acts].length > 0)
    events = [ ]
    file = File.open(job[:conf][:file])
    stream = EventStream.new(file)
    while (event = stream.next!)
      include = true
      job[:acts].each do |act|
        if (!act.call(event))
          include = false
          break
        end
      end
      if (include)
        events.push(event)
      end
    end
    file.close
    #events.sort! { |a,b| a[:timestamp] <=> b[:timestamp] }
    events.each { |event| print_event(event) }
  end
end

# before? :: (bool, int, event) -> bool
def before?(inclusive, date, event)
  if (inclusive)
    event[:timestamp] <= date
  else
    event[:timestamp] < date
  end
end

# after? :: (bool, int, event) -> bool
def after?(inclusive, date, event)
  if (inclusive)
    event[:timestamp] >= date
  else
    event[:timestamp] > date
  end
end

# between? :: (bool, int, int, event) -> bool
def between?(inclusive, start, stop, event)
  ((after?(inclusive, start, event)) &&
   (before?(inclusive, stop, event)))
end

# on? :: (int, event) -> bool
def on?(date, event)
  between?(true, date, (date + 86400), event)
end

# not_on? :: (int, event) -> bool
# This solution is not beautiful.  TODO
def not_on?(date, event)
  !on?(date, event)
end

# print_event :: event -> void
def print_event(event)
  $stdout.puts "#{event[:date]}\t#{event[:text]}"
end

# Run it.
run(
  reduce_input(
    prescreen_input(ARGV),
    input_form_specs))
